一、反射的应用1:创建运行时类的对象
1.实现的方法:通过Class的实例调用newInstance()方法
2.想要创建成功的条件
    ①运行时类中必须提供一个空参的构造器(对应InstantiationException异常)
    ②提供的空参构造器的权限足够(对应IllegalAccessException异常)
3.JavaBean中要求给当前类提供一个公共的空参构造器,其作用是:
    ①子类对象在实例化时,子类的构造器的首行默认调用父类空参的构造器
    ②在反射中,经常用来创建运行时类的对象,要求各个运行时类都提供一个空参的构造器,便于编写创建运行时类对象的代码
4.在jdk9中标识为过时,要求通过Constructor类调用newInstance(...)

二、反射的应用2：获取运行时类的内部结构
1.所有属性、方法、构造器
2.父类、接口、包、带泛型的父类、父类的泛型

三、反射的应用3：调用指定的结构，指定的属性、方法、构造器
1.调用指定的属性的步骤
    ①通过Class实例调用getDeclaredField(String fieldName) 获取运行时类指定名的属性
    ②setAccessible(true): 确保此属性是可以访问的
    ③通过Field类的实例调用get(Object obj)获取 或 set(Object obj, Object value)设置此属性的值
2.调用指定的方法的步骤
    ①通过Class的实例调用getDeclaredMethod(String methodName, Class ... args) 获取指定的方法
    ②setAccessible(true): 确保此方法是可访问的
    ③通过Method实例调用invoke(Object obj, Object ... objs),即为对Method对应的方法的调用
3.调用指定的构造器的步骤
    ①通过Class的实例调用getDeclaredConstructor(Class ... args) 获取指定参数类型的构造器
    ②setAccessible(true): 确保此构造器是可以访问的
    ③通过Constructor实例调用newInstance(Object ... objs),返回一个运行时类是实例

四、反射的应用4:通过反射获取注解的信息
1.



