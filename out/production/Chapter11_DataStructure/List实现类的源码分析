一、ArrayList
1.ArrayList的特点
    >实现了List接口,存储有序的、可以重复的数据
    >底层使用Object[]数组存储
    >线程不安全
2.ArrayList源码解析
    ①jdk7版本(1.7.0_07)
        ArrayList<String> list = new ArrayList<>();
        //Object[] elementData = new Object[10];   //初始化数组,数组的长度为10.
        list.add("AA");  //elementData[0] = "AA";
        list.add("BB");  //elementData[1] = "BB";
        ...
        当要添加第11个元素时,底层的elementData数组已满,需要扩容.默认扩容为原来的1.5倍.将原有数组中的元素添加到新的数组中

    ②jdk8版本(1.8.0_271)
        ArrayList<String> list = new ArrayList<>();
        //Object[] elementData = new Object[]{};   //初始化数组,数组的长度为0.
        list.add("AA");
        //elementData = new Object[10];  //首次添加元素,会初始化数组
        //elementData[0] = "AA";
        list.add("BB");  //elementData[1] = "BB";
        ...
        当要添加第11个元素时,底层的elementData数组已满,需要扩容.默认扩容为原来的1.5倍.将原有数组中的元素添加到新的数组中
3.小结
    ①jdk1.7.0_07版本中,ArrayList类似于饿汉式
    ②jdk1.8.0_271版本中,ArrayList类似于懒汉式


二、Vector
1.Vector的特点
    >实现了List接口,存储有序的、可以重复的数据
    >底层使用Object[]数组存储
    >线程安全
2.Vector源码解析(jdk1.8.0_271)
    Vector vector = new Vector();
    //Object[] elementData = new Object[10];  //初始化数组,长度为10
    vector.add("AA");  //elementData[0] = "AA";
    vector.add("BB");  //elementData[1] = "BB";
    ...
    当要添加第11个元素时,底层的elementData数组已满,需要扩容.默认扩容为原来的2倍.将原有数组中的元素添加到新的数组中

三、LinkedList
1.LinkedList的特点
    >实现了List接口,存储有序的、可以重复的数据
    >底层使用双向链表存储
    >线程安全
2.LinkedList在jdk8中的源码解析
    LinkedList<String> list = new LinkedList<>();  //底层没做啥
    list.add("AA");	  //将"AA"封装到一个Node对象1中,list对象的属性first、last都指向此Node对象1
    list.add("BB");	  //将"BB"封装到一个Node对象2中,list对象的属性first、last都指向此Node对象2

    class Node{

    }
3.LinkedList不存在扩容问题!

四、启示
1.Vector基本不用了
2.ArrayList底层使用了数组结构,查找和添加(尾部添加)操作效率高,时间复杂度为o(1);删除和插入操作效率低,时间复杂度为o(n)
3.LinkedList底层使用了双向链表结构,删除和插入操作效率高,时间复杂度为o(1);查找和添加(尾部添加)操作效率低,时间复杂度为o(n)
4.在选择了ArrayList的前提下, new ArrayList(): 底层创建长度为10是数组  ;  new ArrayList(int capacity): 底层创建指定capacity长度的数组
    开发中,如果大致确认数组的长度,推荐使用ArrayList(int capacity)这个构造器,避免底层的扩容、复制数组的操作
